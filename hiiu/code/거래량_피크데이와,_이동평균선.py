# -*- coding: utf-8 -*-
"""거래량 피크데이와, 이동평균선.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11zwB9v1RvSJ9tTnaJYoj9it6Ypv1IMy6
"""

import pandas as pd

# 텍스트 파일 경로 지정 (csv 파일 형식)
file_path = '/content/drive/MyDrive/Colab Notebooks/data/TSLA 20~23.09 일별 거래량.csv'  # 파일 경로 및 파일명을 지정하세요

# 텍스트 파일 불러오기
df = pd.read_csv(file_path)

# '거래량' 열을 문자열로 변환하고 'M' 제거
df['거래량'] = df['거래량'].astype(str).str.replace('M', '')

# '거래량' 열을 숫자로 변환
df['거래량'] = df['거래량'].astype(float)

# '날짜' 열을 날짜 형식으로 변환
df['날짜'] = pd.to_datetime(df['날짜'])

# 데이터를 3개월씩 나누기
start_date = df['날짜'].min()  # 데이터의 시작 날짜
end_date = df['날짜'].max()    # 데이터의 끝 날짜
month_step = 3               # 3개월 간격으로 데이터를 나눔

# 데이터를 3개월씩 분할
date_ranges = pd.date_range(start=start_date, end=end_date, freq=f'{month_step}M')

# 데이터를 3개월씩 분할한 결과를 담을 리스트
data_splits = []

# 날짜 범위별로 데이터를 나누어 리스트에 추가
for i in range(len(date_ranges) - 1):
    start_date = date_ranges[i]
    end_date = date_ranges[i + 1]
    split_data = df[(df['날짜'] >= start_date) & (df['날짜'] <= end_date)]
    data_splits.append(split_data)

# 마지막 3개월 데이터도 추가
last_split = df[df['날짜'] >= date_ranges[-1]]
data_splits.append(last_split)

# 각 3개월 데이터별 거래량 평균 구하고 출력
for i, split in enumerate(data_splits, 1):
    # 거래량 평균 계산
    average_volume = split['거래량'].astype(float).mean()

    # 거래량의 95번째 백분위수 계산
    percentile_95 = split['거래량'].astype(float).quantile(0.95)

    # 평균보다 높은 피크데이 중 상위 5% 찾기
    peak_days = split[split['거래량'].astype(float) > percentile_95]['날짜']

    # 결과 출력
    #print(f"3개월 데이터 {i}의 거래량 평균: {average_volume}")
    print(f"3개월 데이터 {i}의 평균보다 높은 피크데이 중 상위 5%: {peak_days.tolist()}")

!sudo apt-get install -y fonts-nanum
!sudo fc-cache -fv
!rm ~/.cache/matplotlib -rf

import matplotlib.pyplot as plt

plt.rc('font', family='NanumBarunGothic')

import pandas as pd
import matplotlib.pyplot as plt

# 거래량 데이터 불러오기
# df = pd.read_csv('거래량데이터.csv')  # 실제 파일 경로를 사용하세요
# 날짜 열을 Datetime 형식으로 변환
df['날짜'] = pd.to_datetime(df['날짜'])
# 날짜를 인덱스로 설정
df.set_index('날짜', inplace=True)

# 10일 이동평균 계산
moving_average = df['거래량'].rolling(window=120).mean()

# 원래 거래량과 이동평균을 함께 그리기
plt.figure(figsize=(12, 6))
plt.plot(df.index, df['거래량'], label='거래량', color='blue')
plt.plot(moving_average.index, moving_average, label='120일 이동평균', color='red')
plt.xlabel('날짜')
plt.ylabel('거래량')
plt.legend()
plt.title('거래량과 이동평균')

# 거래량이 이동평균선보다 위에 있는 날짜를 찾아 표시
above_average_days = df[df['거래량'] > moving_average]['거래량']
plt.scatter(above_average_days.index, above_average_days, color='green', label='이동평균보다 높은 거래량', marker='o')

plt.show()

import pandas as pd

# 120일 이동평균 계산
moving_average = df['거래량'].rolling(window=120).mean()

# 거래량이 이동평균선보다 위에 있는 날짜를 찾아 표시
above_average_days = df[df['거래량'] > moving_average]

# 날짜와 거래량을 리스트로 정리
above_average_info = above_average_days[['날짜', '거래량']].values.tolist()

# 정리한 정보 출력
for date, volume in above_average_info:
    print(f"날짜: {date.date()}, 거래량: {volume:.2f}")

import pandas as pd

# 120일 이동평균 계산
moving_average = df['거래량'].rolling(window=120).mean()

# 거래량이 이동평균선보다 위에 있는 행 선택
above_average_days = df[df['거래량'] > moving_average]

# 거래량이 이동평균선보다 위에 있는 날짜의 수 계산
count_above_average = above_average_days.shape[0]

# 결과 출력
print(f"거래량이 이동평균선보다 위에 있는 날짜의 수: {count_above_average}일")

import pandas as pd
import matplotlib.pyplot as plt

# 거래량 데이터 불러오기
# df = pd.read_csv('거래량데이터.csv')  # 실제 파일 경로를 사용하세요
# 날짜 열을 Datetime 형식으로 변환
df['날짜'] = pd.to_datetime(df['날짜'])
# 날짜를 인덱스로 설정
df.set_index('날짜', inplace=True)

# 120일 이동평균 계산
moving_average = df['거래량'].rolling(window=120).mean()

# 거래량이 이동평균선보다 위에 있는 날짜를 찾아 표시
above_average_days = df[df['거래량'] > moving_average]

# 거래량의 95번째 백분위수 계산
percentile_95 = above_average_days['거래량'].quantile(0.95)

# 거래량 중 상위 5%만 선택
top_5_percent = above_average_days[above_average_days['거래량'] > percentile_95]

# 원래 거래량과 이동평균을 함께 그리기
plt.figure(figsize=(12, 6))
plt.plot(df.index, df['거래량'], label='거래량', color='blue')
plt.plot(moving_average.index, moving_average, label='120일 이동평균', color='red')
plt.scatter(top_5_percent.index, top_5_percent['거래량'], color='green', label='이동평균보다 높은 상위 5% 거래량', marker='o')
plt.xlabel('날짜')
plt.ylabel('거래량')
plt.legend()
plt.title('거래량과 이동평균 (상위 5%)')

plt.show()

import pandas as pd

# 120일 이동평균 계산
moving_average = df['거래량'].rolling(window=120).mean()

# 거래량이 이동평균선보다 위에 있는 날짜를 찾아 표시
above_average_days = df[df['거래량'] > moving_average]

# 거래량의 95번째 백분위수 계산
percentile_95 = above_average_days['거래량'].quantile(0.95)

# 거래량 중 상위 5%만 선택
top_5_percent = above_average_days[above_average_days['거래량'] > percentile_95]

# 상위 5% 거래량 중의 개수 확인
number_of_top_5_percent = len(top_5_percent)

print(f"거래량 데이터 중 120일 이동평균선보다 위에 있는 거래량 중 상위 5%의 개수: {number_of_top_5_percent}")